"""Auto-generated by generate.sh script."""

# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-01-15T22:35:42+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field


class OICDInfo(BaseModel):
    authority: str = Field(..., title="Authority")
    client_id: str = Field(..., title="Client Id")


class Robot(BaseModel):
    id: str = Field(..., title="Id")
    robot_name: str = Field(..., title="Robot Name")
    description: str = Field(..., title="Description")
    user_id: str = Field(..., title="User Id")
    class_id: str = Field(..., title="Class Id")


class RobotClass(BaseModel):
    id: str = Field(..., title="Id")
    class_name: str = Field(..., title="Class Name")
    description: str = Field(..., title="Description")
    user_id: str = Field(..., title="User Id")


class RobotDownloadURDFResponse(BaseModel):
    url: str = Field(..., title="Url")
    md5_hash: str = Field(..., title="Md5 Hash")


class RobotResponse(BaseModel):
    id: str = Field(..., title="Id")
    robot_name: str = Field(..., title="Robot Name")
    description: str = Field(..., title="Description")
    user_id: str = Field(..., title="User Id")
    class_name: str = Field(..., title="Class Name")


class RobotUploadURDFResponse(BaseModel):
    url: str = Field(..., title="Url")
    filename: str = Field(..., title="Filename")
    content_type: str = Field(..., title="Content Type")


class UserResponse(BaseModel):
    user_id: str = Field(..., title="User Id")
    is_admin: bool = Field(..., title="Is Admin")
    can_upload: bool = Field(..., title="Can Upload")
    can_test: bool = Field(..., title="Can Test")


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class ProfileResponse(BaseModel):
    email: str = Field(..., title="Email")
    email_verified: bool = Field(..., title="Email Verified")
    user: UserResponse
